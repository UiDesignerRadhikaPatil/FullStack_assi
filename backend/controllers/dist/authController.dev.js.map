{"version":3,"sources":["authController.js"],"names":["User","require","registerUser","req","res","body","name","email","password","address","role","findOne","existingUser","status","json","message","newUser","save","user","console","error","loginUser","module","exports"],"mappings":"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","sourcesContent":["const User = require('../models/User'); // Assuming you have a User model\r\n\r\n// Register a new user\r\nconst registerUser = async (req, res) => {\r\n  const { name, email, password, address, role } = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Create a new user\r\n    const newUser = new User({\r\n      name,\r\n      email,\r\n      password, // You may want to hash the password before saving\r\n      address,\r\n      role,\r\n    });\r\n\r\n    // Save the user to the database\r\n    await newUser.save();\r\n\r\n    // Respond with success message and user data\r\n    res.status(201).json({ message: 'User registered successfully', user: newUser });\r\n  } catch (err) {\r\n    console.error('Error registering user:', err);\r\n    res.status(500).json({ message: 'Error registering user. Please try again.' });\r\n  }\r\n};\r\n\r\n// Login user (basic example, consider adding password hashing and JWT)\r\nconst loginUser = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Find user by email\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Validate password (hashing needed for production)\r\n    if (user.password !== password) {\r\n      return res.status(400).json({ message: 'Incorrect password' });\r\n    }\r\n\r\n    // Respond with the user (consider JWT for better security)\r\n    res.status(200).json({ message: 'Login successful', user });\r\n  } catch (err) {\r\n    console.error('Error logging in user:', err);\r\n    res.status(500).json({ message: 'Error logging in user. Please try again.' });\r\n  }\r\n};\r\n\r\nmodule.exports = { registerUser, loginUser };\r\n"],"file":"authController.dev.js"}